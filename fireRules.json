{
  "rules": {
    ".read": "true",
    ".write": "true",
    "businesses": {
      "$b_id": {
        ".validate": "newData.hasChildren(['name', 'number','business', 'address', 'province'])",
        ".write": "!data.exists() || !newData.exists()",
        "name": {
          ".validate": "newData.isString() && newData.val().length >= 2 && newData.val().length <= 48"
        },
        "number": {
          ".validate": "newData.isNumber() && newData.val() < 1000000000"
        },
        "business": {
          ".validate": "newData.isString() && (newData.val().matches(/Fisher/) || newData.val().matches(/Distributor/) || newData.val().matches(/Processer/) || newData.val().matches(/Fish Monger/))"
        },
        "address": {
          ".validate": "newData.val().length < 50"
        },
        "province": {
          ".validate": "newData.val().matches(/AB/) || newData.val().matches(/BC/) || newData.val().matches(/MB/) || newData.val().matches(/NB/) || newData.val().matches(/NL/) || newData.val().matches(/NS/) || newData.val().matches(/NT/) || newData.val().matches(/NU/) || newData.val().matches(/ON/) || newData.val().matches(/PE/) || newData.val().matches(/QC/) || newData.val().matches(/SK/) || newData.val().matches(/YT/) || newData.val().matches(/ /)"
        }

      }
    }
  }
}